Run tests with::

  $ ./runtests.sh

â€¦ from the root of the project.

Which looks for any ``*/feed.*`` files and processes them using each
``*.config`` file in the feed's directory.  The output messages are
saved (not mailed) and compared with the expected output for that
feed/config pair.  For example, with a directory structure like::

  test
  |-- data
  |   |-- allthingsrss
  |   |   |-- 1.config
  |   |   |-- 1.expected
  |   |   |-- 2.config
  |   |   |-- 2.expected
  |   |   `-- feed.atom
  |   `-- otherfeed
  |       |-- a.config
  |       |-- a.expected
  |       |-- b.config
  |       |-- b.expected
  |       `-- feed.rss
  |-- README
  `-- test.py

``test.py`` will parse:

* ``feed.atom`` after loading ``1.config`` and compare the output with
  ``1.expected``.
* ``feed.atom`` after loading ``2.config`` and compare the output with
  ``2.expected``.
* ``feed.rss`` after loading ``a.config`` and compare the output with
  ``a.expected``.
* ``feed.rss`` after loading ``b.config`` and compare the output with
  ``b.expected``.

Various other tests are also run, run runtests.sh with the `-v`/`--verbose` option to
see exactly which tests are being run:

  $ ./runtests.sh --verbose

Because the default test runner captures r2e output in order to make it's assertions, this output will not be printed to the console. This may be detrimental to your debugging efforts and makes it impossible to jump into rss2email code with pdb because stdout is suppressed. To pass output through to the console, use the `-s` flag:

  $ ./runtests.sh -s

By default the test runner will run r2e in the same process which is fast and makes debugging easier. However, in CI we run each r2e instance in a separate process for superior isolation. You can achieve this same quality with the `--subprocess` flag:

  $ ./runtests.sh --subprocess
